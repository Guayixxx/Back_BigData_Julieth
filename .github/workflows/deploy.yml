name: Deploy Flask App to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: |
          pytest --maxfail=1 --disable-warnings -q

      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          echo "$SSH_KEY" > ec2_key.pem
          chmod 600 ec2_key.pem

          # Copiar archivos a la instancia EC2 en la carpeta flask-app
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
            # Crear el directorio flask-app si no existe
            mkdir -p /home/$USER/flask-app

            # Actualizar e instalar dependencias
            sudo apt-get update
            sudo apt-get install -y python3-pip python3-venv

            # Descargar y preparar la aplicación
            rm -rf /home/$USER/flask-app/*
          EOF

          scp -i ec2_key.pem -o StrictHostKeyChecking=no app.py requirements.txt $USER@$HOST:/home/$USER/flask-app/

          # Conectar por SSH y configurar la aplicación
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
            # Crear y activar un entorno virtual en el directorio flask-app
            cd /home/$USER/flask-app
            python3 -m venv venv
            source venv/bin/activate

            # Instalar dependencias
            pip install -r requirements.txt

            # Instalar Gunicorn
            pip install gunicorn

            # Crear el archivo de servicio para Gunicorn
            echo '
            [Unit]
            Description=Gunicorn instance to serve FlaskApp
            After=network.target

            [Service]
            User='$USER'
            Group=www-data
            WorkingDirectory=/home/'$USER'/flask-app
            Environment="PATH=/home/'$USER'/flask-app/venv/bin"
            Environment="DB_USER=${{ secrets.DB_USER }}"
            Environment="DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
            Environment="DB_HOST=${{ secrets.DB_HOST }}"
            Environment="DB_PORT=${{ secrets.DB_PORT }}"
            Environment="DB_NAME=${{ secrets.DB_NAME }}"
            ExecStart=/home/'$USER'/flask-app/venv/bin/gunicorn --workers 3 --bind 0.0.0.0:5000 app:app

            [Install]
            WantedBy=multi-user.target
            ' | sudo tee /etc/systemd/system/flaskapp.service

            # Recargar el archivo de servicio y reiniciar el servicio Gunicorn
            sudo systemctl daemon-reload
            sudo systemctl start flaskapp
            sudo systemctl enable flaskapp

            sudo systemctl restart flaskapp

            # Opcional: Guardar la IP pública en un archivo para referencia
            echo $HOST > /home/$USER/ip_address.txt
          EOF

          # Leer el archivo con la IP pública de la instancia EC2
          IP_ADDRESS=$(ssh -i ec2_key.pem -o StrictHostKeyChecking=no $USER@$HOST 'cat /home/$USER/ip_address.txt')
          echo "La aplicación Flask está desplegada en la IP: $IP_ADDRESS"
